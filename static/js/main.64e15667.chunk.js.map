{"version":3,"sources":["components/GameButtons/index.js","components/ScoreBoard/index.js","components/Title/index.js","components/Wrapper/index.js","components/Game/index.js","App.js","index.js"],"names":["GameButton","props","className","onClick","changeScore","alt","id","src","image","GameButtons","state","buttons","this","map","button","React","Component","Scoreboard","message","shaking","showMessage","oldStatus","score","highScore","newState","setState","onAnimationEnd","Title","Wrapper","children","Game","shuffleCards","i","length","j","Math","floor","random","x","correctGuess","newButtons","newScore","newHighScore","max","data","incorrectGuess","resetGame","item","clicked","clickEvent","guessedCorrectly","card","newItem","clickedButton","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64e15667.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nimport buttons from \"../../buttons.json\"\r\n\r\nconst GameButton = (props) => {\r\n  return (\r\n  <div className=\"card\">\r\n    <button onClick = {props.changeScore} className=\"img-container\">\r\n      <img alt={props.id} src={props.image} />\r\n    </button>\r\n  </div>\r\n  )\r\n}\r\n\r\nclass GameButtons extends React.Component{\r\n  state = {\r\n    buttons\r\n  }\r\n\r\n  render () {\r\n    return(\r\n      <>\r\n      {this.state.buttons.map(button => (\r\n        <GameButton\r\n        id={button.id}\r\n        image={button.image}\r\n          />\r\n      ))}\r\n      </>\r\n    )\r\n  }    \r\n}\r\n\r\nexport default GameButtons;","import React, {Component} from \"react\";\r\n\r\n\r\nclass Scoreboard extends Component{\r\n    state = {\r\n        message: \"\",\r\n        shaking: false\r\n    }\r\n    componentDidUpdate({score, highScore}, oldStatus) {\r\n        const newState = {shaking: true}\r\n        if (score === 0 && highScore === 0) {\r\n            newState.message = \"\"\r\n        } else if (score === 0 && highScore > 0) {\r\n            newState.message = \"incorrect\"\r\n        } else {\r\n            newState.message = \"correct\"\r\n        }\r\n        if (score !== this.props.score || this.state.message !== newState.message)\r\n        this.setState(newState)\r\n    }\r\n    showMessage = () => {\r\n        switch (this.state.message) {\r\n            case \"correct\":\r\n                return \"That is correct!\"\r\n            case \"incorrect\":\r\n                return \"That is incorrect!\"\r\n            default:\r\n                return \"Click any image to begin. Don't guess the same one more than once!\"\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <li className = {this.state.shaking ? this.state.message : \"\"}\r\n            onAnimationEnd = {() => this.setState({shaking: false})}> {this.showMessage}</li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Scoreboard;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Scoreboard from \"../ScoreBoard\";\r\n\r\nfunction Title(props) {\r\n    return (\r\n        <nav className = \"headerInfo\">\r\n            <ul>\r\n                <h1 className = \"gameTitle\">Clicky Game!</h1>\r\n                <Scoreboard score = {props.score} highScore = {props.highScore} />\r\n                <li>Score: {props.score} | High Score: {props.highScore}</li>\r\n            </ul>\r\n        </nav>\r\n    )}\r\n\r\nexport default Title","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\nreturn <div className = \"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper","import React, {Component} from \"react\";\r\nimport buttons from \"../../buttons.json\";\r\nimport GameButtons from \"../GameButtons\"\r\n// import ScoreBoard from \"../ScoreBoard\";\r\nimport Title from \"../Title\"\r\nimport Wrapper from \"../Wrapper\"\r\n\r\nclass Game extends Component{\r\n    state = {\r\n        buttons,\r\n        score: 0,\r\n        highScore: 0\r\n    }\r\n    componentDidMount() {\r\n        this.setState({buttons: this.shuffleCards(this.state.buttons)})\r\n    }\r\n    shuffleCards = buttons => {\r\n        for (let i=buttons.length -1; i>0; i--) {\r\n            let j = Math.floor(Math.random() * (i+1))\r\n            let x = buttons[i]; \r\n            buttons[i] = buttons[j];\r\n            buttons[j] = x\r\n        }\r\n        return buttons\r\n    }\r\n    correctGuess = newButtons => {\r\n        const {score, highScore} = this.state;\r\n        const newScore = score + 1;\r\n        const newHighScore = Math.max(newScore, highScore);\r\n\r\n        this.newState({\r\n            data: this.shuffleCards(newButtons),\r\n            score: newScore,\r\n            highScore: newHighScore\r\n        })\r\n    }\r\n    incorrectGuess = buttons => {\r\n        this.newState({\r\n            data: this.resetGame(buttons),\r\n            score: 0\r\n        })\r\n    }\r\n    resetGame = buttons => {\r\n        const resetGame = buttons.map(item => ({ ...item, clicked: false}))\r\n        return this.shuffleCards(resetGame)\r\n    }\r\n    clickEvent = id => {\r\n        let guessedCorrectly = false\r\n        const newButtons = this.state.buttons.map(card => {\r\n            const newItem = {...card}\r\n            if (newItem.id === id) {\r\n                if (!newItem.clicked) {\r\n                    newItem.clicked = true;\r\n                    guessedCorrectly = true;\r\n                }\r\n            }\r\n            return newItem\r\n        })\r\n        if (guessedCorrectly === true) {\r\n            this.correctGuess(newButtons)\r\n        } else{\r\n            this.incorrectGuess(newButtons)\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <Wrapper>\r\n                <Title score = {this.state.score} highScore = {this.state.highScore} />\r\n                <GameButtons clickedButton = {this.clickEvent} />\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game","import React from 'react';\nimport Game from './components/Game';\n// import Title from './components/Title';\n// import Wrapper from './components/Wrapper';\n// import buttons from './buttons.json'\n// import Scoreboard from './components/ScoreBoard';\n\n//put both scoreboard and title in their own html div\n  function App() {\n    return (\n        <Game/>\n    )\n  }\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}