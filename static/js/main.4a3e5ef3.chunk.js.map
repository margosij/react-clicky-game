{"version":3,"sources":["components/GameButtons/index.js","components/Title/index.js","components/Wrapper/index.js","components/Game/index.js","App.js","index.js"],"names":["GameButton","props","className","id","onClick","onButtonClick","alt","src","image","GameButtons","state","buttons","this","map","button","key","React","Component","Title","message","score","highScore","Wrapper","children","Game","shuffleCards","i","length","j","Math","floor","random","x","correctGuess","newButtons","newScore","newHighScore","max","setState","incorrectGuess","resetGame","item","clicked","clickEvent","event","parseInt","target","guessedCorrectly","newItem","App","ReactDOM","render","document","getElementById"],"mappings":"4qEAIMA,G,MAAa,SAACC,GAClB,OACA,yBAAKC,UAAU,QACb,4BAAQC,GAAIF,EAAME,GAAIC,QAASH,EAAMI,cAAeH,UAAU,iBAC5D,yBAAKC,GAAIF,EAAME,GAAIG,IAAKL,EAAME,GAAII,IAAKN,EAAMO,YA2BpCC,E,2MApBbC,MAAQ,CACNC,W,wEAGS,IAAD,OACR,OACE,oCACCC,KAAKX,MAAMU,QAAQE,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACAC,IAAKD,EAAOX,GACZA,GAAIW,EAAOX,GACXK,MAAOM,EAAON,MACdH,cAAe,EAAKJ,MAAMI,wB,GAbRW,IAAMC,W,MCDjBC,MAXf,SAAejB,GACX,OACI,yBAAKC,UAAY,cACb,4BACI,wBAAIA,UAAY,aAAhB,gBACA,4BAAKD,EAAMkB,SACX,sCAAYlB,EAAMmB,MAAlB,kBAAwCnB,EAAMoB,c,MCD/CC,MAJf,SAAiBrB,GACjB,OAAO,yBAAKC,UAAY,WAAWD,EAAMsB,WCwE1BC,E,2MAtEXd,MAAQ,CACJC,UACAS,MAAO,EACPC,UAAW,EACXF,QAAS,6B,EAKbM,aAAe,SAAAd,GACX,IAAK,IAAIe,EAAEf,EAAQgB,OAAQ,EAAGD,EAAE,EAAGA,IAAK,CACpC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAE,IAClCM,EAAIrB,EAAQe,GAChBf,EAAQe,GAAKf,EAAQiB,GACrBjB,EAAQiB,GAAKI,EAEjB,OAAOrB,G,EAEXsB,aAAe,SAAAC,GAAe,IAAD,EACE,EAAKxB,MAAzBU,EADkB,EAClBA,MAAOC,EADW,EACXA,UACRc,EAAWf,EAAQ,EACnBgB,EAAeP,KAAKQ,IAAIF,EAAUd,GACxC,EAAKiB,SAAS,CACV3B,QAAS,EAAKc,aAAaS,GAC3Bd,MAAOe,EACPd,UAAWe,EACXjB,QAAS,sB,EAGjBoB,eAAiB,SAAA5B,GACb,EAAK2B,SAAS,CACV3B,QAAS,EAAK6B,UAAU7B,GACxBS,MAAO,EACPD,QAAS,wD,EAGjBqB,UAAY,SAAA7B,GACR,IAAM6B,EAAY7B,EAAQE,KAAI,SAAA4B,GAAI,sBAAUA,EAAV,CAAgBC,SAAS,OAC3D,OAAO,EAAKjB,aAAae,I,EAE7BG,WAAa,SAAAC,GACT,IAAMzC,EAAK0C,SAASD,EAAME,OAAO3C,IAC7B4C,GAAmB,EACjBb,EAAa,EAAKxB,MAAMC,QAAQE,KAAI,SAAAmC,GAOtC,OANIA,EAAQ7C,KAAOA,IACV6C,EAAQN,UACTM,EAAQN,SAAU,EAClBK,GAAmB,IAGpBC,KAEX,EAAKvB,aAAaS,GAClB,EAAKI,SAAS,CAAE3B,QAASuB,KACA,IAArBa,EACA,EAAKd,aAAaC,GAElB,EAAKK,eAAeL,I,mFAlDxBtB,KAAK0B,SAAS,CAAC3B,QAASC,KAAKa,aAAab,KAAKF,MAAMC,a,+BAsDrD,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAOS,MAAOR,KAAKF,MAAMU,MAAOC,UAAWT,KAAKF,MAAMW,UAAWF,QAASP,KAAKF,MAAMS,UACrF,kBAAC,EAAD,CAAad,cAAeO,KAAK+B,WAAYhC,QAASC,KAAKF,MAAMC,e,GAjE9DM,aCUJgC,MAPb,WACE,OACI,kBAAC,EAAD,OCJRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4a3e5ef3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nimport buttons from \"../../buttons.json\"\r\n\r\nconst GameButton = (props) => {\r\n  return (\r\n  <div className=\"card\">\r\n    <button id={props.id} onClick={props.onButtonClick} className=\"img-container\">\r\n      <img id={props.id} alt={props.id} src={props.image} />\r\n    </button>\r\n  </div>\r\n  )\r\n}\r\n\r\nclass GameButtons extends React.Component{\r\n  state = {\r\n    buttons\r\n  }\r\n\r\n  render () {\r\n    return(\r\n      <>\r\n      {this.props.buttons.map(button => (\r\n        <GameButton\r\n        key={button.id}\r\n        id={button.id}\r\n        image={button.image}\r\n        onButtonClick={this.props.onButtonClick}\r\n          />\r\n      ))}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GameButtons;","import React from \"react\";\r\nimport \"./style.css\";\r\nfunction Title(props) {\r\n    return (\r\n        <nav className = \"headerInfo\">\r\n            <ul>\r\n                <h1 className = \"gameTitle\">Clicky Game!</h1>\r\n                <li>{props.message}</li>\r\n                <li>Score: {props.score} | High Score: {props.highScore}</li>\r\n            </ul>\r\n        </nav>\r\n    )}\r\n    \r\nexport default Title","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\nreturn <div className = \"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper","import React, {Component} from \"react\";\r\nimport buttons from \"../../buttons.json\";\r\nimport GameButtons from \"../GameButtons\"\r\nimport Title from \"../Title\"\r\nimport Wrapper from \"../Wrapper\"\r\nclass Game extends Component{\r\n    state = {\r\n        buttons,\r\n        score: 0,\r\n        highScore: 0,\r\n        message: 'Click any image to start!'\r\n    }\r\n    componentDidMount() {\r\n        this.setState({buttons: this.shuffleCards(this.state.buttons)})\r\n    }\r\n    shuffleCards = buttons => {\r\n        for (let i=buttons.length -1; i>0; i--) {\r\n            let j = Math.floor(Math.random() * (i+1))\r\n            let x = buttons[i];\r\n            buttons[i] = buttons[j];\r\n            buttons[j] = x\r\n        }\r\n        return buttons\r\n    }\r\n    correctGuess = newButtons => {\r\n        const {score, highScore} = this.state;\r\n        const newScore = score + 1;\r\n        const newHighScore = Math.max(newScore, highScore);\r\n        this.setState({\r\n            buttons: this.shuffleCards(newButtons),\r\n            score: newScore,\r\n            highScore: newHighScore,\r\n            message: 'That is correct!'\r\n        })\r\n    }\r\n    incorrectGuess = buttons => {\r\n        this.setState({\r\n            buttons: this.resetGame(buttons),\r\n            score: 0,\r\n            message: 'That is not correct! Press any image to try again!'\r\n        })\r\n    }\r\n    resetGame = buttons => {\r\n        const resetGame = buttons.map(item => ({ ...item, clicked: false}))\r\n        return this.shuffleCards(resetGame);\r\n    }\r\n    clickEvent = event => {\r\n        const id = parseInt(event.target.id);\r\n        let guessedCorrectly = false;\r\n        const newButtons = this.state.buttons.map(newItem => {\r\n            if (newItem.id === id) {\r\n                if (!newItem.clicked) {\r\n                    newItem.clicked = true;\r\n                    guessedCorrectly = true;\r\n                }\r\n            }\r\n            return newItem\r\n        });\r\n        this.shuffleCards(newButtons);\r\n        this.setState({ buttons: newButtons });\r\n        if (guessedCorrectly === true) {\r\n            this.correctGuess(newButtons)\r\n        } else{\r\n            this.incorrectGuess(newButtons)\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <Wrapper>\r\n                <Title score={this.state.score} highScore={this.state.highScore} message={this.state.message}/>\r\n                <GameButtons onButtonClick={this.clickEvent} buttons={this.state.buttons} />\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game","import React from 'react';\nimport Game from './components/Game';\n// import Title from './components/Title';\n// import Wrapper from './components/Wrapper';\n// import buttons from './buttons.json'\n// import Scoreboard from './components/ScoreBoard';\n\n//put both scoreboard and title in their own html div\n  function App() {\n    return (\n        <Game/>\n    )\n  }\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}